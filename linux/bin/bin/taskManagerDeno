const readFile = async (path)=>{
    return await Deno.readTextFile(new URL(path, "file:///home/yaslix/projects/dn/index.ts"));
};
const execCmd = async (command)=>{
    const p = Deno.run({
        cmd: [
            "bash"
        ],
        stdout: "piped",
        stdin: "piped"
    });
    const encoder = new TextEncoder();
    await p.stdin.write(encoder.encode(command));
    await p.stdin.close();
    await p.output();
    p.close();
};
const getFolder = async (command)=>{
    const folderCmd = Deno.run({
        cmd: [
            "bash"
        ],
        stdout: "piped",
        stdin: "piped"
    });
    const encoder = new TextEncoder();
    await folderCmd.stdin.write(encoder.encode(command));
    await folderCmd.stdin.close();
    const folderText = new TextDecoder().decode(await folderCmd.output());
    return folderText.trim();
    folderCmd.close();
};
try {
    const folder = await getFolder('tmux display-message -p -F \"#{pane_current_path}\" -t0');
    const text = await readFile(`${folder}/package.json`);
    const { scripts  } = JSON.parse(text);
    const scriptsArray = Object.keys(scripts);
    let command = "";
    for(const script in scriptsArray){
        if (parseInt(script, 10) === scriptsArray.length - 1) {
            command.concat(scriptsArray[script]);
            command += `yarn ${scriptsArray[script]}`;
        } else {
            command.concat(scriptsArray[script]);
            command += `yarn ${scriptsArray[script]}\\n`;
        }
    }
    let commandWithDmenu = `$(echo -en '${command}' | dmenu -c -i -l 8 -w 310)`;
    const fullCommand = `tmux new-window "/bin/sh -c '${commandWithDmenu}; exec zsh'"`;
    await execCmd(fullCommand);
} catch (error) {
    Deno.exit(1);
}
