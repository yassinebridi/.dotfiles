#!/bin/sh
readonly BASH_BINARY="$(which bash)"
readonly REDRAW_COMMAND="toggle-preview+toggle-preview"
readonly REDRAW_KEY="Âµ"
declare -r -x DEFAULT_PREVIEW_POSITION="right"
declare -r -x UEBERZUG_FIFO="$(mktemp --dry-run --suffix "fzf-$$-ueberzug")"
declare -r -x PREVIEW_ID="preview"

function is_option_key [[ "${@}" =~ ^(\-.*|\+.*) ]]
function is_key_value [[ "${@}" == *=* ]]

function map_options {
    local -n options="${1}"
    local -n options_map="${2}"

    for ((i=0; i < ${#options[@]}; i++)); do
        local key="${options[$i]}" next_key="${options[$((i + 1))]:---}"
        local value=true
        is_option_key "${key}" || \
            continue
        if is_key_value "${key}"; then
            <<<"${key}" \
                IFS='=' read key value
        elif ! is_option_key "${next_key}"; then
            value="${next_key}"
        fi
        options_map["${key}"]="${value}"
    done
}

function parse_options {
    declare -g -a script_options=("${@}")
    declare -g -A mapped_options
    map_options script_options mapped_options
    declare -g -r -x PREVIEW_POSITION="${mapped_options[--preview-window]%%:[^:]*}"
}

function start_ueberzug {
    mkfifo "${UEBERZUG_FIFO}"
    <"${UEBERZUG_FIFO}" \
        ueberzug layer --parser bash --silent &
    # prevent EOF
    3>"${UEBERZUG_FIFO}" \
        exec
}

function finalise {
    3>&- \
        exec
    &>/dev/null \
        rm "${UEBERZUG_FIFO}"
    &>/dev/null \
        kill $(jobs -p)
}

function calculate_position {
    < <(</dev/tty stty size) \
        read TERMINAL_LINES TERMINAL_COLUMNS

    case "${PREVIEW_POSITION:-${DEFAULT_PREVIEW_POSITION}}" in
        left|up|top)
            X=1
            Y=1
            ;;
        right)
            X=$((TERMINAL_COLUMNS - COLUMNS - 2))
            Y=1
            ;;
        down|bottom)
            X=1
            Y=$((TERMINAL_LINES - LINES - 1))
            ;;
    esac
}

function draw_preview {
		hash_file() {
			printf '%s/.cache/fzf/%s' "$HOME" \
				"$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- \
				"$(readlink -f "${@}")" | sha256sum | awk '{print $1}')"
		}
		draw() {
			>"${UEBERZUG_FIFO}" declare -A -p cmd=( \
					[action]=add [identifier]="${PREVIEW_ID}" \
					[x]="${X}" [y]="${Y}" \
					[width]="${COLUMNS}" [height]="${LINES}" \
					[scaler]=contain [scaling_position_x]=0.5 [scaling_position_y]=0.5 \
					[path]="$1")
		}
		clear_preview() {
			>"${UEBERZUG_FIFO}" declare -A -p cmd=([action]=remove [identifier]="${PREVIEW_ID}")
		}
		cache() {
			if [ -f "$1" ]; then
				draw "$1"
			fi
		}

		calculate_position

		case "$(file -Lb --mime-type -- "${@}")" in
			text/*) 
				clear_preview
				bat --color=always ${@} 
				;;
			image/*) draw "${@}";;
			video/*)
				cache="$(hash_file "${@}").jpg"
				cache "$cache"
				ffmpegthumbnailer -i "${@}" -o "$cache" -s 0
				draw "$cache"
				;;
		esac

		case "${@}" in
			*.7z|*.a|*.ace|*.alz|*.arc|*.arj|*.bz|*.bz2|*.cab|*.cpio|*.deb|*.gz|*.jar|\
			*.lha|*.lrz|*.lz|*.lzh|*.lzma|*.lzo|*.rar|*.rpm|*.rz|*.t7z|*.tar|*.tbz|\
			*.tbz2|*.tgz|*.tlz|*.txz|*.tZ|*.tzo|*.war|*.xz|*.Z|*.zip)
				als -- "${@}"
				;;
			*.[1-8])
				man -- "${@}" | col -b
				exit 0
				;;
			*.pdf)
				cache="$(hash_file "${@}")"
				cache "$cache.jpg"

				pdftoppm -f 1 -l 1 \
					-scale-to-x "$default_x" \
					-scale-to-y -1 \
					-singlefile \
					-jpeg \
					-- "${@}" "$cache"

				draw "$cache.jpg"
				;;
			*.docx|*.odt|*.epub) pandoc -s -t plain -- "${@}" ;;
			*.svg)
				cache="$(hash_file "${@}").jpg"
				cache "$cache"

				convert -- "${@}" "$cache"

				draw "$cache"
				;;
		esac

}

function print_on_winch {
    </dev/tty \
        exec perl -e '
            require "sys/ioctl.ph";
            while (1) {
                local $SIG{WINCH} = sub {
                    ioctl(STDIN, &TIOCSTI, $_) for split "", join " ", @ARGV;
                };
                sleep;
            }' \
            "${@}" &
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    trap finalise EXIT
    parse_options "${@}"

    print_on_winch "${REDRAW_KEY}${REDRAW_KEY}"
    start_ueberzug

    export -f draw_preview calculate_position
    SHELL="${BASH_BINARY}" \
        fzf -i --preview "draw_preview {}" \
            --preview-window "${DEFAULT_PREVIEW_POSITION}" \
            --bind "${REDRAW_KEY}:${REDRAW_COMMAND}" \
            "${@}"
fi
